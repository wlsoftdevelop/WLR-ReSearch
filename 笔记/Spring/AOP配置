启动AOP配置
 
要在 spring 应用中使用 AspectJ 注解，需要如下支持：
1. 在 classpath 下包含 AspectJ 类库：aopalliance.jar、aspectj.weaver.jar 和 spring-aspects.jar
2. 将 aop Schema 添加到 Bean 配置文件 <beans> 根元素中。
3. 在 Bean 配置文件中定义一个空的 XML 元素 <aop:aspectj-autoproxy><aop:aspectj-autoproxy/>
注：当 Spring IOC 容器侦测到 Bean 配置文件中的<aop:aspectj-autoproxy><aop:aspectj-autoproxy/> 元素时，会自动为与 AspectJ 切面匹配的 Bean 创建代理。
 
用 AspectJ 注解声明切面
 
要在 Spring 中声明 AspectJ 切面，只需要在 IOC 容器中将切面声明为 Bean 实例。当在 Spring IOC 容器中初始化 AspectJ 切面之后，Spring IOC 容器就会为那些与 AspectJ 切面相匹配的 Bean 创建代理。在 AspectJ 注解中，切面只是一个带有 @Aspect 注解的 Java 类。通知是标注有某种注解的简单的 Java 方法。
 
AspectJ 支持 5 种类型的通知注解：
 
@Before：前置通知，在方法执行之前执行
@After：后置通知，在方法执行之后执行 
@AfterRunning：返回通知，在方法返回结果之后执行
@AfterThrowing：异常通知，在方法抛出异常之后
@Around：环绕通知，围绕着方法执行
 
前置通知
 
前置通知：在方法执行之前执行的通知。
前置通知使用 @Before 注解，并将切入点表达式的值作为注解值。
 
Java代码  收藏代码
/** 
 * 把这个类声明为一个切面： 
 * 1. 使用注解“@Repository”把该类放入到IOC容器中 
 * 2. 使用注解“@Aspect”把该类声明为一个切面 
 *  
 * 设置切面的优先级: 
 * 3. 使用注解“@Order(number)”指定前面的优先级，值越小，优先级越高 
 */  
@Order(1)  
@Aspect  
@Repository  
public class DaoLogAspect {  
    /** 
     * 声明该方法是一个前置通知:在目标方法开始之前执行 
     * '@Before'标识这个方法是个前置通知,切点表达式表示执行 UserDao类的 insert(User user) 方法. 
     */  
    @Before("execution(public xyz.huning.spring4.aop.dao.User xyz.huning.spring4.aop.dao.impl.UserDao.insert(xyz.huning.spring4.aop.dao.User))")  
    public void beforeInsert()  
    {  
        System.out.println("--beforeInsert------------");  
    }  
}  
 
利用方法签名编写 AspectJ 切入点表达式
 
最典型的切入点表达式是根据方法的签名来匹配各种方法：
execution * xyz.huning.spring4.aop.dao.impl.UserDao.*(..)：匹配UserDao中声明的所有方法,第一个 * 代表任意修饰符及任意返回值。第二个 * 代表任意方法。 .. 匹配任意数量的参数。若目标类与接口与该切面在同一个包中，可以省略包名。
execution public * UserDao.*(..)：匹配 UserDao类的所有公有方法。
execution public double UserDao.*(..)：匹配 UserDao中返回 double 类型数值的方法。
execution public double UserDao.*(double, ..)：匹配第一个参数为 double 类型的方法， .. 匹配任意数量任意类型的参数。
execution public double UserDao.*(double，double)：匹配参数类型为 double，double 类型的方法。
 
 
合并切入点表达式
 
在 AspectJ 中，切入点表达式可以通过操作符 &&，||，! 结合起来。
 
Java代码  收藏代码
/** 
 * 合并切入点表达式 
 * 在 AspectJ 中，切入点表达式可以通过操作符 &&，||，! 结合起来。 
 */  
@Pointcut("execution(* *.insert(..)) || execution(* *.delete(..))")  
public void insertDeleteJoinPoint(){}  
  
让通知访问当前连接点的细节
 
可以在通知方法中声明一个类型为 JoinPoint 的参数。然后就能访问链接细节。如方法名称和参数值。
 
Java代码  收藏代码
/** 
 * 声明该方法是一个前置通知:在目标方法开始之前执行 
 */  
@Before("execution(public xyz.huning.spring4.aop.dao.User xyz.huning.spring4.aop.dao.impl.UserDao.insert(xyz.huning.spring4.aop.dao.User))")  
public void beforeInsert(JoinPoint joinPoint)  
{  
    System.out.println("--beforeInsert with joinPoint------------");  
    //获取方法名称  
    String methodName = joinPoint.getSignature().getName();  
    //获取参数值  
    String args = Arrays.toString(joinPoint.getArgs());  
    System.out.println("Taget method: " + methodName);  
    System.out.println("Taget method args: " + args);  
}  
 
后置通知
 
后置通知是在连接点完成之后执行的， 即连接点返回结果或者抛出异常的时候，下面的后置通知记录了方法的终止。
一个切面可以包括一个或者多个通知。
 
Java代码  收藏代码
/** 
 * 声明该方法是一个后置通知:在目标方法开始之后执行(即使目标方法执行出现异常也会执行) 
 * 后置通知中不能访问目标方法的执行结果 
 */  
@After("execution(public xyz.huning.spring4.aop.dao.User xyz.huning.spring4.aop.dao.impl.UserDao.insert(xyz.huning.spring4.aop.dao.User))")  
public void afterInsert()  
{  
    System.out.println("--afterInsert------------");  
}  
 
返回通知
 
无论连接点是正常返回还是抛出异常，后置通知都会执行。如果只想在连接点返回的时候记录日志，应使用返回通知代替后置通知。在返回通知中，只要将 returning 属性添加到 @AfterReturning 注解中，就可以访问连接点的返回值。该属性的值即为用来传入返回值的参数名称。必须在通知方法的签名中添加一个同名参数。在运行时，Spring AOP 会通过这个参数传递返回值。原始的切点表达式需要出现在 pointcut 属性中。
 
Java代码  收藏代码
/** 
 * 声明该方法是一个返回通知:在目标方法正常结束之后返回(目标方法执行出现异常时不再执行) 
 * 返回通知可以访问目标方法的执行结果 
 */  
@AfterReturning(value="execution(* xyz.huning.spring4.aop.dao.impl.UserDao.query(..))",returning="result")  
public void afterQueryReturning(JoinPoint joinPoint,Object result)  
{  
    System.out.println("--afterQueryReturning with joinPoint and result------------");  
    String methodName = joinPoint.getSignature().getName();  
    String args = Arrays.toString(joinPoint.getArgs());  
    System.out.println("Taget method: " + methodName);  
    System.out.println("Taget method args: " + args);  
    System.out.println("Taget method execute result: " + result);  
}  
 
异常通知
 
只在连接点抛出异常时才执行异常通知，将 throwing 属性添加到 @AfterThrowing 注解中，也可以访问连接点抛出的异常。Throwable 是所有错误和异常类的超类。所以在异常通知方法可以捕获到任何错误和异常。如果只对某种特殊的异常类型感兴趣，可以将参数声明为其他异常的参数类型。然后通知就只在抛出这个类型及其子类的异常时才被执行。
 
Java代码  收藏代码
/** 
 * 声明该方法是一个异常通知:在目标方法出现异常时执行此方法 
 * 异常通知可以访问目标方法中的异常对象，且可以指定在出现特定异常时再执行通知代码 
 */  
@AfterThrowing(value="execution(* xyz.huning.spring4.aop.dao.impl.UserDao.*(..))",throwing="e")  
public void afterAllThrowing(JoinPoint joinPoint,Exception e)  
{  
    System.out.println("--afterAllThrowing with throwing------------");  
    System.out.println("Taget method execute exception: " + e);  
}  
  
/** 
 * 指定在出现特定异常时再执行通知代码 
 */  
@AfterThrowing(value="execution(* xyz.huning.spring4.aop.dao.impl.UserDao.*(..))",throwing="e")  
public void afterAllThrowing(JoinPoint joinPoint,NullPointerException e)  
{  
    System.out.println("--afterAllThrowing with NullPointerException------------");  
    System.out.println("Taget method execute exception: " + e);  
}  
 
环绕通知
 
环绕通知是所有通知类型中功能最为强大的，能够全面地控制连接点。甚至可以控制是否执行连接点。对于环绕通知来说，连接点的参数类型必须是 ProceedingJoinPoint 。它是 JoinPoint 的子接口，允许控制何时执行，是否执行连接点。在环绕通知中需要明确调用 ProceedingJoinPoint 的 proceed() 方法来执行被代理的方法。如果忘记这样做就会导致通知被执行了，但目标方法没有被执行。
注意：环绕通知的方法需要返回目标方法执行之后的结果，即调用 joinPoint.proceed()的返回值，否则会出现空指针异常。
 
Java代码  收藏代码
/** 
 * 环绕通知需要携带ProceedingJoinPoint类型的参数 
 * 环绕通知类似于动态代理的全过程：ProceedingJoinPoint类型的参数可以决定是否执行目标方法 
 * 且环绕通知必须有返回值，返回值即为目标方法的返回值 
 */  
@Around("execution(* xyz.huning.spring4.aop.dao.impl.UserDao.delete(..))")  
public Object around(ProceedingJoinPoint pj)  
{  
    Object result = null;  
    String methodName = pj.getSignature().getName();  
      
    try{  
        //前置通知  
        System.out.println("The method: " + methodName + "前置通知");  
        //执行目标方法  
        result = pj.proceed();  
        //返回通知  
        System.out.println("The method: " + methodName + "返回通知");  
    }catch(Throwable e)  
    {  
        //异常通知  
        System.out.println("The method: " + methodName + "异常通知： " + e.getMessage());  
    }  
    //后置通知  
    System.out.println("The method: " + methodName + "后置通知");  
      
    return result;  
}  
 
 
指定切面的优先级
 
在同一个连接点上应用不止一个切面时，除非明确指定，否则它们的优先级是不确定的。切面的优先级可以通过实现 Ordered 接口或利用 @Order 注解指定。实现 Ordered 接口,，getOrder() 方法的返回值越小，优先级越高。若使用 @Order 注解，序号出现在注解中。
 
重用切入点定义
 
在编写 AspectJ 切面时，可以直接在通知注解中书写切入点表达式，但同一个切点表达式可能会在多个通知中重复出现。在 AspectJ 切面中，可以通过 @Pointcut 注解将一个切入点声明成简单的方法。切入点的方法体通常是空的，因为将切入点定义与应用程序逻辑混在一起是不合理的。切入点方法的访问控制符同时也控制着这个切入点的可见性。如果切入点要在多个切面中共用，最好将它们集中在一个公共的类中。在这种情况下，它们必须被声明为 public。在引入这个切入点时，必须将类名也包括在内。如果类没有与这个切面放在同一个包中，还必须包含包名。其他通知可以通过方法名称引入该切入点。
 
Java代码  收藏代码
/** 
 *  
 * ************重用切点表达式******************************************************************************** 
 *  
 * 定义一个方法，用于声明切入点表达式，一般的，该方法中不再不要填土其他的代码。 
 * 使用@Pointcut来声明切入点表达式。 
 * 同一个类中其他通知直接使用方法名来引用当前的切入点表达式，如：@Before("method()") 
 * 同一个报下其他类中的通知需要在方法名前加类名，如：@Before("class.method()") 
 * 其他包下面类中的通知需要在方法名前加类的全额限定名,如：@AfterReturning(value="package.class.method()",returning="result") 
 *  
 * 第一个星号代表匹配任意修饰符及任意返回值, 第二个星号表示任意方法名称，参数列表中的两个点号表示任意数量和类型的参数 
 */  
@Pointcut("execution(* xyz.huning.spring4.aop.dao.impl.UserDao.*(..))")  
public void userDaoJoinPoint(){} 
